import {useEffect, useState} from "react";
import type {AppProps} from 'next/app'
import Head from "next/head";
import Image from "next/image";
import Header from "../_pages/components/Header/Header";
import Disclaimer from "../_pages/components/Disclaimer/Disclaimer";
import styles from "../../styles/Home.module.css";
import '../../styles/globals.css'
import { ThemeProvider, createTheme } from "@mui/material/styles";
import Footer from "../_pages/components/Footer/Footer";
import Fab from '@mui/material/Fab';
import {KeyboardArrowUp} from "@mui/icons-material";
import ScrollTop from "../components/composite/ScrollTop/ScrollTop";
import { GraphQLClient, gql } from "graphql-request";
import { QueryClient, QueryClientProvider  } from "react-query";
import {useRouter} from "next/router";


const theme = createTheme({
    palette: {
        white: {
            main: '#fff',
        },
        primary: {
            main: '#D4AF37',
        }
    }
});


const queryClient = new QueryClient();



function MyApp({Component, pageProps}: AppProps) {

    const [disclaimerOpen, setDisclaimerOpen] = useState(false);
    const [contentScrolled, setContentScrolled] = useState(false);
    const trackScrolling = () => {
        const wrappedElement = document.getElementById('content');
        if (wrappedElement && wrappedElement.getBoundingClientRect().top < -50) {
            return setContentScrolled(true);
        }
        setContentScrolled(false);
    };
    useEffect(() => {
        if (document && localStorage) {
            document.addEventListener('scroll', trackScrolling);
            const _disclaimerOpen = localStorage.getItem('disclaimerOpen');
            if (_disclaimerOpen === null || _disclaimerOpen === undefined) {
                setDisclaimerOpen(true)
            }
        }
        return () => {
            document.removeEventListener('scroll', trackScrolling);
        }
    }, [setDisclaimerOpen]);

    const handleOnDisclaimerAgree = () => {
        localStorage.setItem('disclaimerOpen', 'false');
        setDisclaimerOpen(false);
    };

    const router = useRouter();
    const currentRoute = router.pathname;

    const isNotHome = currentRoute !== '/';


    return <>
        <Head>
            <title>Lets Get Technical</title>
            <meta name="description" content="Generated by create next app"/>
            <link rel="icon" href="/favicon.ico"/>
            <link
                rel="stylesheet"
                href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
            />
        </Head>
            <QueryClientProvider client={queryClient}>
                <ThemeProvider theme={theme}>
                    <div role='none' style={{display: 'hidden'}} id='back-to-top-anchor' />
                    <Header
                        position='sticky'
                        color={contentScrolled ? 'white' : 'transparent'}
                        contentScrolled={contentScrolled} elevation={0}
                        flipColors={isNotHome}
                        style={{...(isNotHome && {backgroundColor: '#D4AF37'})}}/>
                    <div id='content'>
                        <Component {...pageProps} contentScrolled={contentScrolled} />
                    </div>
                    <Footer />
                    {/*<footer className={styles.footer}>*/}
                    {/*    <a*/}
                    {/*        href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"*/}
                    {/*        target="_blank"*/}
                    {/*        rel="noopener noreferrer"*/}
                    {/*    >*/}
                    {/*        Powered by{' '}*/}
                    {/*        <span className={styles.logo}>*/}
                    {/*          <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16}/>*/}
                    {/*        </span>*/}
                    {/*    </a>*/}
                    {/*</footer>*/}
                    <Disclaimer open={disclaimerOpen} onAgree={handleOnDisclaimerAgree}/>
                    {contentScrolled && <ScrollTop><Fab
                        // size='large'
                        style={{
                            color: '#111',
                            background: '#FFF'
                        }}>
                        <KeyboardArrowUp />
                    </Fab></ScrollTop>}
                </ThemeProvider>
            </QueryClientProvider>
    </>;
}

export default MyApp
